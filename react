LINEAR:
1,2:
(Alex,Coding competition)
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    if(n<=0){
        cout<<"-1";
            return 0;
    }
    int arr[n];
    for(int i=0;i<n;i++){
        if(!(cin>>arr[i])){
            cout<<"Invalid input";
            return 0;
        }
    }
    int k;cin>>k;
    int result=-1;
    for(int i=0;i<n;i++){
        if(arr[i]==k){
            cout<<"Found"; 
            return 0;
        }
    }
    cout<<"Not Found";
}


3:(Sarah)
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    if(n<=0){
        cout<<"-1";
            return 0;
    }
    int arr[n];
    for(int i=0;i<n;i++){
        if(!(cin>>arr[i])){
            cout<<"Invalid input";
            return 0;
        }
    }
    int k;cin>>k;
    int result=-1;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++)
        if(arr[i]==arr[j]){
            cout<<"Duplicate Found"; 
            return 0;
        }
    }
    cout<<"No Duplicate";
}

BINARY:
1,2,3 :
// editor1
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    if(n<=0){
        cout<<"-1";
            return 0;
    }
    int arr[n];
    for(int i=0;i<n;i++){
        if(!(cin>>arr[i])){
            cout<<"Invalid input";
            return 0;
        }
    }
    int t;cin>>t;
    int first=0;
    int last=n-1;
    while(first<=last){
        int mid=(first+last)/2;
        if(arr[mid]==t){
            cout<<"Found";
            return 0;
        }
        else if(arr[mid]<t){
            first=mid+1;
        }
        else{
            last=mid-1;
        }
    }
    cout<<"Not found";
    
}


SORTING:
1.
#include<iostream>
using namespace std;
int main(){
    int size;
    cin>>size;
    int arr[size];
    for(int i=0;i<size;i++){
        if(!(cin>>arr[i])){
            cout<<"Invalid input";
            return 0;
        }
    }
    
    for(int itr=0;itr<size;itr++){
        for(int ind=0;ind<size-1;ind++){
            if(arr[ind]>arr[ind+1]){
                int temp=arr[ind];
                arr[ind]=arr[ind+1];
                arr[ind+1]=temp;
                
            }
        }
        
    }
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
   
}

GREEDY ALGORITHM:
1.(Coin change)

#include<iostream>
#include<vector>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        if(!(cin>>arr[i])||arr[i]<0){
            cout<<"Invalid input";
            return 0;
        }
    }
    int amt;
    cin>>amt;
    for(int i=0;i<n;i++){
        for(int j=0;j<n-1;j++){
            if(arr[j]<arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
    if(amt<arr[n-1]){
        cout<<"-1";
        return 0;
    }
    int am=amt;
    vector<int>ans;
    for(int i=0;i<n;i++){
        while(amt>=arr[i]){
            amt-=arr[i];
            ans.push_back(arr[i]);
        }
    }
    cout<<ans.size()<<endl;
}

2.(start and end time)

#include <iostream>
using namespace std;

int main(){
    int n;
    cin>>n;
    if(n<1){
        cout<<"Invalid input";
        return 0;
    }
    int start[n],end[n];
    for(int i=0;i<n;i++){
        cin>>start[i]>>end[i];
        if(start[i]>end[i]){
            cout<<"-1";
            return 0;
        }
    }
    for(int itr=0;itr<n-1;itr++){
        for(int i=0;i<n-1-itr;i++){
            if(end[i]>end[i+1]){
                swap(start[i],start[i+1]);
                swap(end[i],end[i+1]);
            }
        }
    }
    
    int cnt=1;
    int prevend=end[0];
    for(int i=0;i<n;i++){
        if(start[i]>=prevend){
            prevend=end[i];
            cnt++;
        }
    }
    cout<<cnt;
}

3.(entreprenur)

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Job {
    int deadline, profit;
};

bool compare(Job a, Job b) {
    return a.profit > b.profit;
}

int main() {
    int n;
    cin >> n;
    if (n <= 0 || n > 10) {
        cout << "Invalid input";
        return 0;
    }

    vector<Job> jobs(n);
    for (int i = 0; i < n; i++) {
        cin >> jobs[i].deadline >> jobs[i].profit;
        if (jobs[i].deadline <= 0 || jobs[i].deadline > 1000 || jobs[i].profit <= 0 || jobs[i].profit > 1000) {
            cout << "Invalid input";
            return 0;
        }
    }

    sort(jobs.begin(), jobs.end(), compare);

    int maxDeadline = 0;
    for (int i = 0; i < n; i++) {
        if (jobs[i].deadline > maxDeadline) {
            maxDeadline = jobs[i].deadline;
        }
    }

    vector<int> slot(maxDeadline + 1, -1);
    int countJobs = 0, maxProfit = 0;
    for (int i = 0; i < n; i++) {
        for (int j = min(maxDeadline, jobs[i].deadline); j > 0; j--) {
            if (slot[j] == -1) {
                slot[j] = i;
                countJobs++;
                maxProfit += jobs[i].profit;
                break;
            }
        }
    }

    cout << maxProfit;
}

PATTERN:
1.	(text editor)
#include <iostream>
#include <string>
using namespace std;
int main() {
    string text, pattern;
    cin >> text >> pattern;
    int n = text.length();
    int m = pattern.length();
    if (n == 0 || m == 0) {
        cout << "Invalid input" << endl;
        return 0;
    }
    for (int i = 0; i < n; i++) {
        if (!isalnum(text[i])) {
            cout << "Invalid input" << endl;
            return 0;
        }
    }
    for (int i = 0; i < m; i++) {
        if (!isalnum(pattern[i])) {
            cout << "Invalid input" << endl;
            return 0;
        }
    }
    bool found = false;
    for (int i = 0; i <= n - m; i++) {  
        int j;
        for (j = 0; j < m; j++) {
            if (text[i + j] != pattern[j]) {
                break;
            }
        }
        if (j == m) {  
            cout << i << endl;
            found = true;
        }
    }
    if (!found) {
        cout << "Pattern not found" << endl;
    }

    return 0;
}
2. (case insensitive)
#include <iostream>
#include <string>
using namespace std;
int main() {
    int n1;
    cin>>n1;
    cin.ignore();
    if (n1 <= 0) {
        cout << "Invalid input" << endl;
        return 0;
    }
    string txt[n1], pattern;
    for(int i=0;i<n1;i++){
        getline(cin,txt[i]);
    }
    cin >> pattern;
    bool found = false;
    
    for(int k=0;k<n1;k++){
        string text=txt[k];
        int n = text.length();
        int m = pattern.length();
        for (int i = 0; i < n; i++) {
            if (!isalnum(text[i])&&text[i]!=' ') {
                cout << "Invalid input" << endl;
                return 0;
            }
            text[i]=tolower(text[i]);
        }
        for (int i = 0; i < m; i++) {
            if (!isalnum(pattern[i])) {
                cout << "Invalid input" << endl;
                return 0;
            }
            pattern[i]=tolower(pattern[i]);
        }
        for (int i = 0; i <= n - m; i++) {  
            int j;
            for (j = 0; j < m; j++) {
                if (text[i + j] != pattern[j]) {
                    break;
                }
            }
            if (j == m) {  
                cout << k << endl;
                found = true;
            }
        }
    }
    if (!found) {
            cout << "Pattern not found" << endl;
        }
    return 0;
}


BACKTRACKING 
1. (chess)
#include<iostream>
using namespace std;
void display(int **mat,int num){
    for(int i=0;i<num;i++){
        for(int j=0;j<num;j++){
            if(mat[i][j]==1){
                cout<<"Q ";
            }
            else if(mat[i][j]==0){
                cout<<". ";
            }
        }
        cout<<endl;
    }
    cout<<endl;
}

bool check(int **mat,int row,int col,int num){
    int i,j;
    for(i=row;i>=0;i--)
        if(mat[i][col]==1) return false;
    for(i=row,j=col;i>=0&&j>=0;i--,j--)
        if(mat[i][j]==1) return false;
    for(i=row,j=col;i>=0&&j<num;i--,j++)
        if(mat[i][j]==1) return false;
    return true;
}

void nqueen(int **mat,int num,int row){
    int col;
    if(row==num){
        display(mat,num);
        return;
    }
    else{
        for(col=0;col<num;col++){
            if(check(mat,row,col,num)){
                mat[row][col]=1;
                nqueen(mat,num,row+1);
                mat[row][col]=0;
            }
        }
    }
}
int main(){
    int num;
    if(!(cin>>num)){
        cout<<"Invalid input";
        return 0;
    }
    if(num>=9){
        cout<<"Invalid input";
        return 0;
    }
    if(num==2||num==3){
        cout<<"No solution exists";
        return 0;
    }
    int **mat =new int*[num];
    for(int ind=0;ind<num;ind++)
    mat[ind]=new int[num];
    nqueen(mat,num,0);
    return 0;
}

2,3:(sudoku)
#include<iostream>
using namespace std;
const int S=9;
bool isvalid(int r,int c,int n,int g[S][S]){
    for(int i=0;i<S;i++){
        if(g[r][i] == n || g[i][c] == n){        {
            return false;
        }
    }
    int br=r-r%3;
    int bc=c-c%3;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(g[br+i][bc+j] == n){
                return false;
            }
        }
    }
    return true;
}
bool solve(int g[S][S]){
    for(int i=0;i<S;i++){
        for(int j=0;j<S;j++){
            if(g[i][j] == 0){
                for(int n=1;n<=S;n++){
                    if(isvalid(i,j,n,g)){
                        g[i][j]=n;
                        if(solve(g)){
                            return true;
                        }
                        g[i][j]=0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}
void print(int g[S][S]){
    for(int i=0;i<S;i++){
        for(int j=0;j<S;j++){
            cout<<g[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main(){
    int g[S][S];
    for(int i=0;i<S;i++){
        for(int j=0;j<S;j++){
            cin>>g[i][j];
            if(g[i][j]<0 || g[i][j]>9){
                cout<<"Invalid input"<<endl;
                return 0;
            }
        }
    }
    if(solve(g)){
        print(g);
    }
    else{
        cout<<"No solution exists"<<endl;
    }
    return 0;
}

DYNAMIC:
1.(Mathematician)

#include<iostream>
#include<vector>
using namespace std;
int main() {
    int n;
    if (!(cin >> n) || n < 0) {
        cout << "Invalid input";
        return 0;
    }
    if (n == 0) {
        cout << 0;
        return 0;
    } else if (n == 1) {
        cout << 1;
        return 0;
    }
    vector<int> fib(n + 1);
    fib[0] = 0;  // F(0)
    fib[1] = 1;  // F(1)
    for (int i = 2; i <= n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    cout << fib[n];
    return 0;
}

2.(Scientists)
#include <iostream>
#include <string>
#include <cctype>
#include <vector>
using namespace std;

bool isvalidinput(const string &str) {
    if (str.length() > 100) return false;
    if (str.empty()) return false; 
    for (char c : str) {
        if (!isalpha(c)) return false;
    }
    return true;
}

int lcs(const string &str1, const string &str2) {
    int m = str1.length();
    int n = str2.length();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[m][n];
}

int main() {
    string str1, str2;
    cout << "Enter first string: ";
    getline(cin, str1);
    cout << "Enter second string: ";
    getline(cin, str2);
    
    if (!isvalidinput(str1) || !isvalidinput(str2)) {
        cout << "Invalid input" << endl;
        return 1; 
    }
    
    cout << "Length of Longest Common Subsequence: " << lcs(str1, str2) << endl;
    return 0;
}


3.(Trader)

#include <iostream>
#include <climits>
using namespace std;

int main() {
    int n;
    cin >> n;
    if (n < 1) {
        cout << "Invalid input" << endl;
        return 0;
    }

    int diff[n];
    for (int i = 0; i < n; ++i) {
        cin >> diff[i];
        if (diff[i] < -10000 || diff[i] > 10000) {
            cout << "Invalid input" << endl;
            return 0;
        }
    }
    
    int max_so_far = INT_MIN;
    int max_ending_here = 0;
    
    for (int i = 0; i < n; i++) {
        max_ending_here += diff[i];
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
        }
        
        if (max_ending_here < 0) {
            max_ending_here = 0;
        }
    }
    cout << max_so_far << endl;
    return 0;
}
RANGE QUERY:
1.(Max)

#include <iostream>
#include <vector>
using namespace std;
int main() {
    int n;
    cin >> n; 
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    vector<int> pre(n + 1, 0);
    for (int i = 1; i <= n; ++i) {
        pre[i] = pre[i - 1] + arr[i - 1];
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; ++i) {
        int start, end;
        cin >> start >> end;

        if (start < 0 || end >= n || start > end) {
            cout << "Invalid input" << endl;
        } 
        else {
            int sum = pre[end + 1] - pre[start];
            cout << sum << endl;
        }
    }
    return 0;
}

2.(Gardener)
#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    vector<int> pH(n);
    for (int i = 0; i < n; ++i) {
        cin >> pH[i];
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; ++i) {
        int start, end;
        cin >> start >> end;
        if (start < 0 || end >= n || start > end) {
            cout << "Invalid input" << endl;
        } 
        else {
            int minp = INT_MAX;
            for (int j = start; j <= end; ++j) {
                minp = min(minp, pH[j]);
            }
            cout << minp << endl;
        }
    }
    return 0;
}


3.(Cybersecurity)

#include <iostream>
#include <vector>
using namespace std;
int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    vector<int> prefixXOR(n + 1, 0);
    for (int i = 1; i <= n; ++i) {
        prefixXOR[i] = prefixXOR[i - 1] ^ arr[i - 1];
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; ++i) {
        int start, end;
        cin >> start >> end;
        if (start < 0 || end >= n || start > end) {
            cout << "Invalid input" << endl;
        }
        else {
            int result = prefixXOR[end + 1] ^ prefixXOR[start];
            cout << result << endl;
        }
    }
    return 0;
}

MST:
1,2,3:
#include <iostream>
#include <vector>
#include <queue>
#include <utility> // for std::pair
#include <limits>
using namespace std;
const int INF = numeric_limits<int>::max();
int prim(int n, vector<vector<pair<int, int>>>& graph) {
    vector<int> minCost(n + 1, INF);
    vector<bool> inMST(n + 1, false);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    minCost[1] = 0; 
    pq.push({0, 1}); 
    int totalCost = 0;
    int edgesUsed = 0; 
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        if (inMST[u]) continue;
        inMST[u] = true;
        totalCost += minCost[u];
        edgesUsed++;
        for (const auto& edge : graph[u]) {
            int v = edge.first;
            int cost = edge.second;
            if (!inMST[v] && cost < minCost[v]) {
                minCost[v] = cost;
                pq.push({minCost[v], v});
            }
        }
    }
    if (edgesUsed != n) return -1; 
    return totalCost;
}
int main() {
    int t, r;
    cin >> t >> r;
    if (t < 1 || r < 0) {
        cout << "Invalid input" << endl;
        return 0;
    }
    vector<vector<pair<int, int>>> graph(t + 1);
    for (int i = 0; i < r; ++i) {
        int u, v, road_cost;
        cin >> u >> v >> road_cost;
        if (u < 1 || u > t || v < 1 || v > t || road_cost <= 0) {
            cout << "Invalid input" << endl;
            return 0;
        }
        graph[u].push_back({v, road_cost});
        graph[v].push_back({u, road_cost}); // Undirected graph
    } 
    if (t > 1 && r == 0) {
        cout << "Cannot connect all towns" << endl;
        return 0;
    } 
    int result = prim(t, graph); 
    if (result == -1) {
        cout << "Cannot connect all towns" << endl;
    } else {
        cout << result << endl;
    }
    return 0; 
   }



SHORT PATH:
1,2,3:
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

struct Edge {
    int u, v, w;
};
int main() {
    int n, m;
    cin >> n;
    if (n <= 0) {
        cout << "Invalid input" << endl;
        return 0;
    }
    cin >> m;
    if (m < 0) {
        cout << "Invalid input" << endl;
        return 0;
    }
    vector<Edge> edges(m);
    for (int i = 0; i < m; i++) {
        int u, v, w;
        if (!(cin >> u >> v >> w) || u < 0 || u >= n || v < 0 || v >= n) {
            cout << "Invalid input" << endl;
            return 0;
        }
        edges[i] = {u, v, w};
    }
    int source;
    if (!(cin >> source) || source < 0 || source >= n) {
        cout << "Invalid input" << endl;
        return 0;
    }
    vector<int> dist(n, INT_MAX);
    dist[source] = 0;
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int w = edges[j].w;
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }
    for (int j = 0; j < m; j++) {
        int u = edges[j].u;
        int v = edges[j].v;
        int w = edges[j].w;
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
            cout << "Negative weight cycle detected" << endl;
            return 0;
        }
    }
    for (int i = 0; i < n; i++) {
        if (dist[i] == INT_MAX) {
            cout << "Path not found" << endl;
        } else {
            cout << dist[i] << " ";
        }
    }
    cout << endl;
    return 0;    }


MAXIMUM CUT:
1,2,3:

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <climits>
using namespace std;
class Dinic {
public:
    struct Edge {
        int to;       
        size_t rev;   
        long long cap; 
    };

  Dinic(int n) : n(n), graph(n), level(n), ptr(n) {}

    void addEdge(int u, int v, long long cap) {
        
        graph[u].push_back({v, graph[v].size(), cap});
        graph[v].push_back({u, graph[u].size() - 1, 0});
    }

    bool bfs(int source, int sink) {
        fill(level.begin(), level.end(), -1);
        queue<int> q;
        q.push(source);
        level[source] = 0;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (auto &e : graph[u]) {
                if (level[e.to] == -1 && e.cap > 0) {
                    level[e.to] = level[u] + 1;
                    if (e.to == sink) return true;
                    q.push(e.to);
                }
            }
        }
        return false;
    }

    long long dfs(int u, int sink, long long flow) {
        if (u == sink) return flow;
        for (; ptr[u] < graph[u].size(); ++ptr[u]) {
            auto &e = graph[u][ptr[u]];
            if (level[e.to] == level[u] + 1 && e.cap > 0) {
                long long pushed = dfs(e.to, sink, min(flow, e.cap));
                if (pushed > 0) {
                    e.cap -= pushed;
                    graph[e.to][e.rev].cap += pushed;
                    return pushed;
                }
            }
        }
        return 0;
    }

    long long dinicMaxFlow(int source, int sink) {
        long long maxFlow = 0;
        while (bfs(source, sink)) {
            fill(ptr.begin(), ptr.end(), 0);
            while (long long flow = dfs(source, sink, LLONG_MAX)) {
                maxFlow += flow;
            }
        }
        return maxFlow;
    }

private:
    int n;
    vector<vector<Edge>> graph;
    vector<int> level, ptr;
};

int main() {
    int n, m;
    cin >> n >> m;
    if (n < 1 || n > 10) {  
        cout << "Invalid input" << endl;
        return 0;
    }

    Dinic dinic(n);

    for (int i = 0; i < m; ++i) {
        int u, v;
        long long c;
        cin >> u >> v >> c;
        if (u < 0 || u >= n || v < 0 || v >= n || c < 0) {
            cout << "Invalid input" << endl;
            return 0;
        }
        
        dinic.addEdge(u, v, c);
    }

    int source, sink;
    cin >> source >> sink;
    if (source < 0 || source >= n || sink < 0 || sink >= n) {
        cout << "Invalid input" << endl;
        return 0;
    }

    long long maxFlow = dinic.dinicMaxFlow(source, sink);
    cout << maxFlow << endl;

    return 0;
}




